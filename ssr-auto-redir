#!/bin/bash
echoerr() {
	echo "$@" 1>&2
	exit 1
}

debug() {
	# echo [DEBUG] "$@"
	return
}

# cwd
ROOT_PATH="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

LOCAL_PATH="$ROOT_PATH/local.json"

check_root() {
	if [ "$(id -u)" != "0" ]; then
		echoerr "This script MUST BE run as ROOT"
	fi
}

check_path() {
	if [ ! -f "$1" ]; then
		echoerr "$1 does not exist"
	fi
}

check_ssr() {
	if ! type ssr-redir >/dev/null 2>&1; then
		echoerr "shadowsocksr-libev is required"
	fi
}

clear_rules() {
	check_root
	echo "Clearing rules..."
	iptables -t nat -D OUTPUT -p tcp -j SHADOWSOCKS
	iptables -t nat -F SHADOWSOCKS
	iptables -t nat -X SHADOWSOCKS
	ipset destroy shadowsocks
}

link() {
	check_root
	ln -sf "$ROOT_PATH" /opt/ssr-auto-redir
	cp systemd/ssr-auto-redir@.service /etc/systemd/system/ssr-auto-redir@.service
	systemctl daemon-reload
}

unlink() {
	check_root
	rm -rf /opt/ssr-auto-redir
	rm -rf /etc/systemd/system/ssr-auto-redir@.service
	systemctl daemon-reload
}

update() {
	check_root
	rm -rf /etc/systemd/system/ssr-auto-redir@.service
	cp systemd/ssr-auto-redir@.service /etc/systemd/system/ssr-auto-redir@.service
	systemctl daemon-reload
}

pull() {
	mv -f routes/chnroute.txt routes/chnroute.txt.bak
	curl $(jq -r ".chnroute_url" "$LOCAL_PATH") | grep ipv4 | grep CN | awk -F\| '{ printf("%s/%d\n", $4, 32-log($5)/log(2)) }' >routes/chnroute.txt
}

connect() {
	check_root
    check_ssr

	check_path "$LOCAL_PATH"

	CONFIG_PATH="$ROOT_PATH/config/$1.json"

	check_path "$CONFIG_PATH"

	# create a new link
	iptables -t nat -N SHADOWSOCKS

	# Bypass ips
	SERVER=$(jq -r ".server" "$CONFIG_PATH")

	if [[ $SERVER =~ "127."* ]]; then
		echo "Skipping local address $SERVER"
	else
		iptables -t nat -A SHADOWSOCKS -d "$SERVER" -j RETURN
	fi
	BYPASS_IPS=$(jq -r ".bypass_ips" "$LOCAL_PATH")

	if [[ "$BYPASS_IPS" != "null" ]]; then
		# Should only iterate when the item is not null
		BYPASS_IPS=$(jq -r ".bypass_ips[]" "$LOCAL_PATH")
		for ip in $BYPASS_IPS; do
			iptables -t nat -A SHADOWSOCKS -d "$ip" -j RETURN
		done
	fi

	# Allow connection to preserved networks
	iptables -t nat -A SHADOWSOCKS -d 0.0.0.0/8 -j RETURN
	iptables -t nat -A SHADOWSOCKS -d 10.0.0.0/8 -j RETURN
	iptables -t nat -A SHADOWSOCKS -d 127.0.0.0/8 -j RETURN
	iptables -t nat -A SHADOWSOCKS -d 169.254.0.0/16 -j RETURN
	iptables -t nat -A SHADOWSOCKS -d 172.16.0.0/12 -j RETURN
	iptables -t nat -A SHADOWSOCKS -d 192.168.0.0/16 -j RETURN
	iptables -t nat -A SHADOWSOCKS -d 224.0.0.0/4 -j RETURN
	iptables -t nat -A SHADOWSOCKS -d 240.0.0.0/4 -j RETURN

	# Load bypass route set
	ipset create shadowsocks hash:net maxelem 65536

	BYPASS_PRESET=$(jq -r ".bypass_preset" "$LOCAL_PATH")

	if [[ "$BYPASS_PRESET" == "chnroute" ]]; then
		while IFS= read -r ip; do
			ipset add shadowsocks "$ip"
		done <"$ROOT_PATH/routes/chnroute.txt"
	fi

	iptables -t nat -A SHADOWSOCKS -p tcp -m set --match-set shadowsocks dst -j RETURN

	# Redirect to ss-redir port
	LOCAL_PORT=$(jq -r ".local_port" "$LOCAL_PATH")

	iptables -t nat -A SHADOWSOCKS -p tcp -j REDIRECT --to-port $LOCAL_PORT

	# append SHADOWSOCKS to OUTPUT
	iptables -t nat -A OUTPUT -p tcp -j SHADOWSOCKS

	# Build ss-redir params
	PARAMS="-c $CONFIG_PATH -l $LOCAL_PORT"

	if [[ $(jq -r ".ota" "$LOCAL_PATH") == "true" ]]; then
		PARAMS="-A $PARAMS"
	fi

	ssr-redir $PARAMS

	# ssr-redir has exited.
	clear_rules
}

base64URL() {
	len=$((${#1} % 4))
	if [ $len -eq 2 ]; then
		raw="$1"'=='
	elif [ $len -eq 3 ]; then
		raw="$1"'='
	else
		raw="$1"
	fi
	echo "$raw" | tr '_-' '/+' | base64 -d
}

create_config() {
	config='{}'
	base_vals=${1%%/?*}
	keys=(server server_port protocol method obfs password)
	for i in {1..6}; do
		val=$(echo "$base_vals" | cut -d ':' -f$i)
		[[ $i -eq 6 ]] && val=$(base64URL "$val")
		[[ $i -eq 1 ]] && REMARK=$val
		tpl='. + {"'${keys[$i - 1]}'": $val}'
		config=$(echo "$config" | jq --arg val "$val" "$tpl")
	done

	other_vals=${1##*/?}

	debug other_vals "$other_vals"
	if [[ $other_vals =~ 'group='([a-zA-Z0-9]*) ]]; then
		val=$(base64URL "${BASH_REMATCH[1]}")
		config=$(echo "$config" | jq --arg val "$val" '. + {"group": $val}')
		debug group: "$val"
	fi

	if [[ $other_vals =~ 'protoparam='([a-zA-Z0-9]*) ]]; then
		val=$(base64URL "${BASH_REMATCH[1]}")
		config=$(echo "$config" | jq --arg val "$val" '. + {"protocol_param": $val}')
		debug protocol_param : "$val"
	fi

	if [[ $other_vals =~ 'remarks='([a-zA-Z0-9]*) ]]; then
		val=$(base64URL "${BASH_REMATCH[1]}")
		config=$(echo "$config" | jq --arg val "$val" '. + {"remarks": $val}')
		REMARK=$val
		debug remarks: "$val"
	fi

	if [[ $other_vals =~ 'obfsparam='([a-zA-Z0-9]*) ]]; then
		val=$(base64URL "${BASH_REMATCH[1]}")
		config=$(echo "$config" | jq --arg val "$val" '. + {"obfs_param": $val}')
		debug obfs_param: "$val"
	fi
	# trim the space of remark
	if [ -n "$REMARK" ]; then
	    echo "$config" >"config/${REMARK// /}.json"
    fi
}

subscribe() {
	SUB_URL=$(jq -r ".sub_url" "$LOCAL_PATH")
	# rm -rf config/*
	curl -L "$SUB_URL" | base64 -d | while IFS= read -r link; do
		ssr_body=$(base64URL "${link:6}")
		create_config "$ssr_body"
	done
}

help() {
	echo
	echo "Usage: ssr-auto-redir <command> [config remark]"
	echo
	echo "Availabe commands: link, unlink, update, pull, connect"
	echo
	echo "link:   link this script into system service"
	echo "unlink: unlink this script from system service"
	echo "update: update the system service file"
	echo "subscribe: update server configs from subscribe url"
	echo "pull:   pull the latest chnroute ips from web"
	echo "connect <remark>: start proxy using the provided config file"
	echo
}

COMMAND="$1"
CONFIG="$2"

if [ "$COMMAND" == "clear" ]; then
	clear_rules

elif [ "$COMMAND" == "pull" ]; then
	pull

elif [ "$COMMAND" == "link" ]; then
	link

elif [ "$COMMAND" == "unlink" ]; then
	unlink

elif [ "$COMMAND" == "update" ]; then
	update

elif [ "$COMMAND" == "connect" ]; then
	connect "$CONFIG"

elif [ "$COMMAND" == "subscribe" ]; then
	subscribe

elif [ "$COMMAND" == "help" ]; then
	help

else
	echoerr "Parameter $COMMAND is not recongnized. Use \"ssr-auto-redir help\" for help"
fi
