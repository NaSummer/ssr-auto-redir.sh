#!/bin/bash
echoerr() { echo "$@" 1>&2; }

# check root
if [ "$(id -u)" != "0" ]; then
    echoerr "This script MUST BE run as ROOT"
    exit 1
fi


if ! type ssr-redir >/dev/null 2>&1; then
    echoerr "shadowsocksr-libev is required"
    exit 1
fi

# cwd
ROOT_PATH="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

clear_rules() {
    echo "Clearing rules..."
    iptables -t nat -D OUTPUT -p tcp -j SHADOWSOCKS
    iptables -t nat -F SHADOWSOCKS
    iptables -t nat -X SHADOWSOCKS
    ipset destroy shadowsocks
}

link() {
    ln -sf "$ROOT_PATH" /opt/ssr-auto-redir
    cp systemd/ssr-auto-redir@.service /etc/systemd/system/ssr-auto-redir@.service
    systemctl daemon-reload
}

unlink() {
    rm -rf /opt/ssr-auto-redir
    rm -rf /etc/systemd/system/ssr-auto-redir@.service
    systemctl daemon-reload
}

update() {
    rm -rf /etc/systemd/system/ssr-auto-redir@.service
    cp systemd/ssr-auto-redir@.service /etc/systemd/system/ssr-auto-redir@.service
    systemctl daemon-reload
}

pull(){
    mv -f routes/chnroute.txt routes/chnroute.txt.bak
    curl 'http://ftp.apnic.net/apnic/stats/apnic/delegated-apnic-latest' | grep ipv4 | grep CN | awk -F\| '{ printf("%s/%d\n", $4, 32-log($5)/log(2)) }' > routes/chnroute.txt
    systemctl daemon-reload
}

connect(){

    CONFIG_PATH="$ROOT_PATH/config/$1.json"

    if [ ! -f "$CONFIG_PATH" ]; then
        echoerr "$CONFIG_PATH does not exist"
        exit 1
    fi
    
    # create a new link
    iptables -t nat -N SHADOWSOCKS
    
    # Bypass ips
    SERVER=$(jq -r ".server" "$CONFIG_PATH")

    echo $SERVER
    
    if [[ $SERVER =~ "127."* ]]; then
        echo "Skipping local address $SERVER"
    else
        iptables -t nat -A SHADOWSOCKS -d "$SERVER" -j RETURN
    fi
    BYPASS_IPS=$(jq -r ".ssr_redir_options.bypass_ips" "$CONFIG_PATH")
    
    if [[ "$BYPASS_IPS" != "null" ]]; then
        # Should only iterate when the item is not null
        BYPASS_IPS=$(jq -r ".ssr_redir_options.bypass_ips[]" "$CONFIG_PATH")
        for ip in $BYPASS_IPS; do
            iptables -t nat -A SHADOWSOCKS -d "$ip" -j RETURN
        done
    fi
    
    
    # Allow connection to preserved networks
    iptables -t nat -A SHADOWSOCKS -d 0.0.0.0/8 -j RETURN
    iptables -t nat -A SHADOWSOCKS -d 10.0.0.0/8 -j RETURN
    iptables -t nat -A SHADOWSOCKS -d 127.0.0.0/8 -j RETURN
    iptables -t nat -A SHADOWSOCKS -d 169.254.0.0/16 -j RETURN
    iptables -t nat -A SHADOWSOCKS -d 172.16.0.0/12 -j RETURN
    iptables -t nat -A SHADOWSOCKS -d 192.168.0.0/16 -j RETURN
    iptables -t nat -A SHADOWSOCKS -d 224.0.0.0/4 -j RETURN
    iptables -t nat -A SHADOWSOCKS -d 240.0.0.0/4 -j RETURN
    
    
    # Load bypass route set
    ipset -N shadowsocks hash:net maxelem 65536
    
    BYPASS_PRESET=$(jq -r ".ssr_redir_options.bypass_preset" "$CONFIG_PATH")
    
    if [[ "$BYPASS_PRESET" == "chnroute" ]]; then
        while IFS= read -r ip; do
            ipset add shadowsocks "$ip"
        done < "$ROOT_PATH/routes/chnroute.txt"
    fi

    iptables -t nat -A SHADOWSOCKS -p tcp -m set --match-set shadowsocks dst -j RETURN

    # Redirect to ss-redir port
    LOCAL_PORT=$(jq -r ".local_port" "$CONFIG_PATH")
    
    iptables -t nat -A SHADOWSOCKS -p tcp -j REDIRECT --to-port $LOCAL_PORT
    
    # append SHADOWSOCKS to OUTPUT
    iptables -t nat -A OUTPUT -p tcp -j SHADOWSOCKS
    
    # Build ss-redir params
    SS_PARAMS="-c $CONFIG_PATH"
    
    if [[ $(jq -r ".ssr_redir_options.ota" "$CONFIG_PATH") == "true" ]]; then
        SS_PARAMS="-A $SS_PARAMS"
    fi
    
    ssr-redir $SS_PARAMS
    
    # ss-redir has exited.
    clear_rules
}


help(){
    echo
    echo "Usage: ssr-auto-redir <command> [config remark]"
    echo
    echo "Availabe commands: link, unlink, update, pull, connect"
    echo
    echo "link:   link this script into system service"
    echo "unlink: unlink this script from system service"
    echo "update: update the system service file"
    echo "pull:   pull the latest chnroute ips from web"
    echo "connect <config remark>: start proxy using the provided config file"
    echo 
    exit 0
}


COMMAND="$1"
CONFIG="$2"

if [ "$COMMAND" == "clear" ]; then
    clear_rules
    
    elif [ "$COMMAND" == "pull" ]; then
    pull
    
    elif [ "$COMMAND" == "link" ]; then
    link
    
    elif [ "$COMMAND" == "unlink" ]; then
    unlink
    
    elif [ "$COMMAND" == "update" ]; then
    update

    elif [ "$COMMAND" == "connect" ]; then
    connect "$CONFIG"
    
    elif [ "$COMMAND" == "help" ]; then
    help
    
else
    echoerr "Parameter $COMMAND is not recongnized. Use \"ssr-auto-redir help\" for help"
    exit 1
fi